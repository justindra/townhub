###############################################################################
# Custom Authorizer                                                           #
#-----------------------------------------------------------------------------#
# This contains the Custom Authorizer that can be shared across all services  #
# and endpoints. It allows our users to Authenticate using Auth0              #
###############################################################################
service: townhub-services-auth

provider:
  name: aws
  runtime: ${file(../shared/provider.yml):runtime}
  region: ${file(../shared/provider.yml):region}
  profile: ${file(../shared/provider.yml):profile}
  stage: ${file(../shared/provider.yml):stage}
  apiGateway: ${file(../shared/api-gateway.yml)}

package:
  individually: true

custom:
  users: ${file(../shared/modules/users.yml)}
  rollup:
    config: ../../build/rollup.config.deploy.js
    installCommand: yarn add

plugins:
  - serverless-rollup-plugin
  - serverless-iam-roles-per-function

functions:
  tokenAuthorizer:
    handler: src/token-authorizer.main
    environment:
      AUTH0_JWKS_URI: ${ssm:/townhub/${opt:stage, 'dev'}/auth0/jwks-uri}
      AUTH0_AUDIENCE: ${ssm:/townhub/${opt:stage, 'dev'}/auth0/audience}
      AUTH0_ISSUER: ${ssm:/townhub/${opt:stage, 'dev'}/auth0/issuer}
      USERS_DATABASE_NAME: ${self:custom.users.tables.users.name}
    iamRoleStatements:
      - ${self:custom.users.tableIamRoles.usersTable}

resources:
  Resources:
    # Create the API Gateway Authorizer so it can be shared
    Auth0Authorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: Auth0Authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: ${self:provider.apiGateway.restApiId}
        Type: TOKEN
        AuthorizerUri: !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt [TokenAuthorizerLambdaFunction, Arn]
            - '/invocations'
  Outputs:
    # Now Output it so that it can be used by other services
    Auth0AuthorizerId:
      Value:
        Ref: Auth0Authorizer
      Export:
        Name: Auth0Authorizer-${self:provider.stage}
